# Claude Code Prompt — Smart Expense Tracker UI/UX Redesign (Masterpiece-Level)

You are Claude Code. Take the existing Smart Expense Tracker MVP (React + TypeScript + Tailwind) and transform its **UI/UX into a masterpiece** — visually stunning, fluid, and intuitive. Focus entirely on the **frontend experience**, ignoring backend code unless necessary for integration.

---

## 🎨 Core Goal
Deliver a **premium, emotionally engaging interface** that feels like Notion × Revolut × Apple design.  
It must **delight users**, communicate **trust**, and make expense tracking **effortless and beautiful**.

---

## 🎯 Core Pages to Redesign
Each page must have a coherent visual system: same typography, color scheme, and layout rhythm.

1. **Login / Register**
   - Minimal, centered card layout
   - Soft gradient background or blurred photo
   - Micro-animations on form inputs
   - Subtle success/failure transitions

2. **Dashboard**
   - Hero section with month summary
   - Smooth animated charts (Recharts + Framer Motion)
   - Quick insights: “You saved X% more this month”
   - Progress bars for budget goals with elegant gradient fills
   - Skeleton loaders for data fetch states

3. **Transactions Page**
   - Modern table with hover row highlights and tags
   - Infinite scroll or virtualized list for performance
   - Inline edit for category
   - Filter/search with smart chips
   - Sticky top summary of totals

4. **Upload CSV**
   - Drag-and-drop zone with animated hover effects
   - File preview modal with friendly validation
   - Stepper-style progress indicator for “Upload → Preview → Import”

5. **Upload Receipt (OCR Flow)**
   - File input with camera preview (on mobile)
   - Animated scanning state (pulsing glow or Lottie animation)
   - Post-scan **verification step**:
     - Editable card layout showing extracted fields
     - Confidence color indicators (red/yellow/green)
     - Transitions for switching between “raw OCR” → “user verified”
   - “Confirm & Import” button with confetti/success animation

6. **Manual Receipt Entry**
   - Adaptive layout mirroring OCR verification
   - Add/remove line items dynamically with + button animation
   - Autocomplete for vendors/categories
   - Smart date picker with quick “Today / Yesterday” options

7. **Budgets**
   - Circular and bar visualizations with smooth progress animation
   - Color-coded thresholds (green/orange/red)
   - Editable budgets in place

---

## 🧠 Interaction Principles
- Motion = meaning. Use **Framer Motion** for micro-interactions, page transitions, and hover feedback.
- Never clutter. Prioritize whitespace, shadow depth, and modular cards.
- Keyboard shortcuts for pros (e.g., `Ctrl + K` command palette to jump to pages).
- Responsive-first: works beautifully on both desktop and mobile.
- Dark mode toggle with smooth transition (store preference in localStorage).
- Toast notifications using `@radix-ui/react-toast` or `sonner`.
- Use iconography from **Lucide** (feather-like icons, consistent stroke weight).

---

## 💡 Design System Guidelines
- Typography: `Inter`, `Poppins`, or `DM Sans`
- Color palette:
  - Primary: `#2563EB` (blue-500)
  - Accent: gradient from `#3B82F6` → `#9333EA`
  - Background: `#F9FAFB` (light) / `#0F172A` (dark)
- Shadows: subtle (`shadow-md` or `shadow-lg`) with rounded-2xl corners
- Use CSS variables for theme tokens (`--primary`, `--accent`, etc.)

---

## 🧩 Deliverables
Claude should output:
1. Updated `frontend/src` structure (with components, hooks, utils).
2. Full code for key pages:
   - `Dashboard.tsx`
   - `UploadReceipt.tsx` (with verification step)
   - `ManualReceipt.tsx`
   - `Budgets.tsx`
   - `App.tsx` (routing + layout)
3. `ThemeProvider.tsx` handling light/dark mode and color tokens.
4. Tailwind config with extended color palette, font families, and animations.
5. Example Framer Motion transitions and animation variants.
6. Small UI copy improvements (microcopy: “Nice catch!”, “Verified ✅”, “Imported 🎉”).
7. `README_UI.md` explaining design rationale and custom components.

---

## 🧠 Quality Targets
- Each animation <200ms, easing = `ease-in-out`
- No page reloads for navigation; use React Router
- Consistent padding and margins (8pt grid)
- Perfect Lighthouse scores (>95) for performance and accessibility
- Component reuse and clean composition (cards, buttons, modals, inputs)

---

## 💬 Tone
Design like a friendly fintech app that **feels alive** and **reassuring**.  
Every click should feel like a small dopamine hit — not chaos, but calm clarity.

---

**Goal:** Produce code and component design that make the UI/UX a premium-grade experience — something users *love* to use, not just tolerate.
